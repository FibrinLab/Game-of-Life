import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Header from '../components/Header'
import Nav from '@/components/Nav'
import Grid from '@/components/Grid'
import React, { useEffect, useState, useRef } from 'react'
import { JsxElement } from 'typescript'

const inter = Inter({ subsets: ['latin'] })

interface State {
  speed: number;
  rows: number;
  columns: number;
  gridFull: boolean[][];
}

export default function Home(): JSX.Element {

  const [speed, setSpeed] = useState<State["speed"]>(100);
  const [rows, setRows] = useState<State["rows"]>(30);
  const [columns, setColumns] = useState<State["columns"]>(50);
  const [gridFull, setGridFull] = useState<State["gridFull"]>(Array(rows).fill(null).map(() => Array(columns).fill(false)));
  const [generation, setGeneration] = useState(0);
  const intervalId = useRef<NodeJS.Timeout | null>(null);


  let selectBox = (rows: number, columns: number) => {
    let gridCopy = arrClone(gridFull)
    gridCopy[rows][columns] = !gridCopy[rows][columns];
    setGridFull(gridCopy)
  }

  const arrClone = (arr: State["gridFull"]) => {
    return JSON.parse(JSON.stringify(arr)) as State["gridFull"]
  }

  const seed = () => {
		let gridCopy = arrClone(gridFull);
		for (let i = 0; i < rows; i++) {
			for (let j = 0; j < columns; j++) {
				if (Math.floor(Math.random() * 4) === 1) {
					gridCopy[i][j] = true;
				}
			}
		}
    setGridFull(gridCopy)

    // setInterval(startButton, 900);
	}
  let gridCopyTest = arrClone(gridFull);
  console.log(gridCopyTest)
  
  const startButton = () => {
    for (let i = 0; i < 100; i++) {
      start();
    }
  }

  // This function applies the rules of Conway's Game of Life to update the state of the grid
  const start = () => {
		let g = gridFull;
    console.log("Before before", g);
		let gridCopy = arrClone(gridFull);

    // Loop through each cell in the grid
    for (let i = 0; i < rows; i++) {
      for (let j = 0; j < columns; j++) {
        let count = 0;

        // Check the 8 adjacent cells to the current cell and count the number of live cells
        if (i > 0) if (g[i - 1][j]) count++;
        if (i > 0 && j > 0) if (g[i - 1][j - 1]) count++;
        if (i > 0 && j < columns - 1) if (g[i - 1][j + 1]) count++;
        if (j < columns - 1) if (g[i][j + 1]) count++;
        if (j > 0) if (g[i][j - 1]) count++;
        if (i < rows - 1) if (g[i + 1][j]) count++;
        if (i < rows - 1 && j > 0) if (g[i + 1][j - 1]) count++;
        if (i < rows - 1 && j < columns - 1) if (g[i + 1][j + 1]) count++;

        // Apply the rules of Conway's Game of Life to update the state of the cell
        if (g[i][j] && (count < 2 || count > 3)) gridCopy[i][j] = false;
        if (!g[i][j] && count === 3) gridCopy[i][j] = true;
      }
    }
    // Update the state of the grid and the generation count
    let gen = generation + 1;
    console.log("Before update", gridFull);
    setGridFull(gridCopy);
    console.log("After update", gridFull);
    setGeneration(gen);
	}
  console.log(generation)

  useEffect(() => {
    seed();
  }, [])
  

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Header 
          generation = {generation}
        />

        <Grid 
          rows = {rows} 
          columns = {columns} 
          gridFull = {gridFull} 
          selectBox = {selectBox}
        />

        <button className={styles.code} onClick={() => startButton()}>Click Me</button>
        <p>Keep Clicking, Dont Stop</p>
      </main>
    </>
  )
}
